using System;
using System.Collections.Generic;
using UnityEngine;
using GambitUtils;

public class FMODEvent
{
    public bool IsInstanceValid => instance.isValid();

    public FMOD.Studio.EventInstance Instance => instance;

    protected FMOD.Studio.EventInstance instance = default;

    private readonly List<FMODParameter> parameters = new List<FMODParameter>();

    protected Transform transform = null;

    public static bool IsValid(string eventName)
    {
        if (!string.IsNullOrEmpty(eventName))
        {
            FMOD.RESULT eventFoundResult = FMODUnity.RuntimeManager.StudioSystem.getEvent(eventName, out FMOD.Studio.EventDescription eventDesc);
            return eventFoundResult == FMOD.RESULT.OK && eventDesc.isValid();
        }
        return false;
    }

    public static FMODEvent CreateWithParameter<T>(string eventName, string paramName, Transform transform = null) where T : Enum
    {
        return CreateWithParameter(eventName, paramName, null, transform);
    }

    public static FMODEvent CreateWithParameter(string eventName, string paramName, List<string> parameterLabels = null, Transform transform = null)
    {
        if (IsValid(eventName))
        {
            FMODEvent eventInstance = new FMODEvent(eventName, transform);
            eventInstance.AddParameter(paramName, parameterLabels);
            return eventInstance;
        }
        return null;
    }

    public FMODEvent(string eventName, Transform transform = null)
    {
        instance = FMODStudio.CreateEventInstance(eventName, transform);
        this.transform = transform;
    }

    public void AttachToGameObject(Transform transform)
    {
        this.transform = transform;
        FMODUnity.RuntimeManager.AttachInstanceToGameObject(instance, transform, null as Rigidbody);
    }

    public FMODParameter AddParameter(string paramName, List<string> labels = null)
    {
        var parameter = FMODParameter.Create(instance, paramName, labels);
        parameters.Add(parameter);
        return parameter;
    }

    public void Play(Enum parameterValue, float volume)
    {
        SetVolume(volume);
        Play(parameterValue);
    }

    public bool Play(params Enum[] parametersValue)
    {
        if (parameters.Count == parametersValue.Length)
        {
            for (int i = 0; i < parameters.Count; i++)
            {
                if (!FMODStudio.SetEventParameterValue(instance, parameters[i].Id, Convert.ToInt32(parametersValue[i])))
                {
                    return false;
                }
            }
            FMODStudio.Play(instance, transform);
            return true;
        }
        else
        {
            Debug.LogError("Incorrect parameters length");
            return false;
        }
    }

    public void Play(string labelName)
    {
        if (parameters.Count == 1)
        {
            FMODParameter parameter = parameters[0];
            if (FMODStudio.SetEventParameterValue(instance, parameter.Id, parameter.GetLabelIndex(labelName)))
            {
                FMODStudio.Play(instance, transform);
            };
        }
    }

    public void Play(string parameterName, Enum parameterValue)
    {
        Play(parameterName, Convert.ToInt32(parameterValue));
    }

    public void Play(string parameterName, string labelName)
    {
        //Debug.Log(GetType() + ".Play: " + parameterName + " " + labelName);
        Play(parameterName, parameter => parameter.GetLabelIndex(labelName));
    }

    public void Play(string parameterName, float paramValue)
    {
        Play(parameterName, parameter => paramValue);
    }

    public void SetPause(bool pause)
    {
        FMODStudio.SetPause(instance, pause);
    }

    public void Stop(bool allowFadeout = false)
    {
        FMODStudio.Stop(instance, allowFadeout);
    }

    public void SetParameter(string parameterName, float paramValue)
    {
        SetParameter(parameterName, parameter => paramValue);
    }

    public void SetParameter(int index, Enum value)
    {
        FMODStudio.SetEventParameterValue(instance, parameters[index].Id, Convert.ToInt32(value));
    }

    protected void Play(string parameterName, Func<FMODParameter, float> getParamValue)
    {
        if (SetParameter(parameterName, getParamValue))
        {
            FMODStudio.Play(instance, transform);
        }
    }

    private bool SetParameter(string parameterName, Func<FMODParameter, float> getParamValue)
    {
        if (instance.isValid() && parameters.Count > 0)
        {
            FMODParameter parameter = parameters.Count > 1 ? parameters.Find(p => p.Name.Equals(parameterName)) : parameters[0];
            if (parameter != null)
            {
                return FMODStudio.SetEventParameterValue(instance, parameter.Id, getParamValue(parameter));
            }
        }
        return false;
    }

    public void Release()
    {
        instance.release();
        instance.clearHandle();
    }

    public void SetVolume(float volume)
    {
        if (instance.isValid())
        { 
            instance.setVolume(volume);
        }
    }
}